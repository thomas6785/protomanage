"""This has a method to convert a hex strings into a list of English words that are easy to spell, phonetically distinct, and inoffensive, and a second method to transform it back."""

nouns = """adult
alarm
angle
ant
apple
arch
arm
army
atlas
baby
bag
ball
band
basin
basket
bath
beach
bed
bee
bell
berry
bird
blade
board
boat
bone
book
boot
bottle
box
boy
brain
brake
branch
brick
bridge
briefing
brush
bucket
bulb
butterfly
button
cake
camera
candidate
cannonball
caravan
card
carriage
cart
cat
cement
chain
cheese
chest
chin
chisel
church
circle
city
clock
cloud
coat
cobra
coffee
collar
comb
cord
cow
cruiser
crusade
cube
cup
curtain
cushion
customer
dashboard
deadbolt
degree
dictator
dog
dolphin
door
drain
drawer
dress
drop
ear
egg
engine
eraser
estate
eye
face
farm
feather
finger
fish
flag
floor
fly
foot
forehead
fork
fowl
frame
friend
galaxy
garden
girl
glove
goat
goldfish
guitar
gun
hair
hamburger
hammer
hand
hat
head
heart
hook
horn
horse
hospital
house
island
jewel
kettle
key
knee
knife
knot
lamp
leaf
leg
lemon
library
line
lip
lock
manager
map
match
monkey
moon
mouth
movie
muscle
nail
neck
needle
nerve
net
newspaper
nose
notebook
nut
ocean
office
orange
oven
pandemic
paper
parcel
payslip
peach
pen
pencil
piano
picture
pig
pin
pipe
plane
planet
plate
plough
pocket
pot
potato
printer
prism
prison
pump
pupil
rail
rat
receipt
ring
rod
roof
root
sail
school
scissors
screw
seed
senator
sentence
sheep
shelf
ship
shirt
shoe
skin
skirt
snake
sock
spade
spaghetti
speaker
sponge
spoon
spring
square
stamp
star
station
stem
stick
stocking
stomach
store
street
suitcase
sun
table
tail
thread
throat
thumb
ticket
toad
toe
tongue
tooth
town
train
tray
tree
trousers
umbrella
video
viper
wall
watch
wheel
whip
whistle
window
windscreen
wing
wire
worm""".split("\n")

adjectives = """acceptable
accurate
acidic
actual
additional
afraid
aggressive
angry
annoying
anxious
automatic
available
awake
basic
beautiful
bent
big
bitter
black
blue
boiling
boring
brass
bright
broken
bronze
brown
capable
careful
certain
cheap
chemical
chief
civil
clean
clear
cold
common
complete
complex
confident
conscious
consistent
correct
critical
cruel
cultural
curious
cute
cutting
dangerous
dark
dead
dear
decent
delicate
dependent
desperate
different
difficult
dirty
distinctive
dramatic
dry
early
eastern
efficient
elastic
elderly
electric
electronic
emerald
emotional
entire
equal
exciting
existing
expensive
false
famous
federal
feeble
female
fertile
final
financial
first
fixed
flat
foolish
foreign
formal
former
fragile
free
frequent
fresh
friendly
future
general
global
glowing
golden
good
great
green
guilty
hanging
happy
hard
healthy
helpful
high
historical
hollow
hot
hungry
important
impossible
impressive
inner
inverted
irritable
large
last
late
left
legal
living
local
logical
long
loose
loud
lucky
male
married
massive
material
medical
medium
mental
military
mistaken
mixed
narrow
national
natural
necessary
normal
numerous
obvious
open
opposite
painted
parallel
past
perfect
physical
pink
pleasant
political
poor
popular
possible
powerful
practical
pregnant
present
private
probable
public
pure
purple
quick
quiet
rare
ready
realistic
reasonable
recent
red
regional
regular
relevant
religious
responsible
right
rough
round
safe
same
scared
second
secret
separate
serious
several
severe
sharp
shiny
short
shut
silver
similar
simple
slow
small
smooth
soft
solid
southern
special
sticky
stiff
straight
strange
strict
strong
successful
sudden
sufficient
suitable
sweet
tactile
tall
technical
terrible
thick
thin
tight
tired
traditional
true
typical
unfair
unhappy
unlikely
unusual
valuable
various
violent
visible
waiting
warm
weak
white
wide
willing
wise
witch
wonderful
wooden
wrong
yellow
young""".split("\n")

def wordify(hexstring : str):
    """TODO docs: write docstring"""

    num = int(hexstring,16)
    words = []
    i = 0
    while i < len(hexstring)/2:
        wordlist = (nouns if i%2 == 0 else adjectives)
        words.insert(0,wordlist[num % 256] + ("," if i%2 == 0 else ""))
        num //= 256
        i += 1
    return " ".join(words)[:-1]

def parse_words(words):
    """TODO docs: write docstring"""

    words = "".join(filter(lambda x : x in "abcdefghijklmnopqrstuvwxyz ",words.lower()))
    words = words.split(" ")

    value = 0
    for i,word in enumerate(words):
        wordlist = (adjectives if i%2 == len(words)%2 else nouns)
        value += wordlist.index(word)
        value *= 256
    value //= 256

    return value

if __name__ == "__main__":
    import uuid
    for test in range(100):
        for length in range(1,13):
            uid = str(uuid.uuid4())[-length:]
            assert parse_words(wordify(uid)) == int(uid,16)
